/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-2a4f2d00","./Check-e5651467","./freezeObject-a51e076f","./defaultValue-29c9b1af","./Math-7782f09e","./Cartesian2-ba70b51f","./defineProperties-c817531e","./Transforms-7d72c08c","./RuntimeError-51c34ab4","./WebGLConstants-90dbfe2f","./ComponentDatatype-418b1c61","./GeometryAttribute-75811f09","./when-1faa3867","./GeometryAttributes-f8548d3f","./AttributeCompression-5601f533","./GeometryPipeline-6fb2c91a","./EncodedCartesian3-4813be74","./IndexDatatype-2bcfc06b","./IntersectionTests-59cef209","./Plane-b1ca737b","./VertexFormat-e2e35139","./arrayRemoveDuplicates-33a93436","./BoundingRectangle-dfcb2ccf","./EllipsoidTangentPlane-8dc9a637","./EllipsoidRhumbLine-d5a5f3d0","./PolygonPipeline-75c02603","./PolylineVolumeGeometryLibrary-dcbe9b14","./EllipsoidGeodesic-666ad0d2","./PolylinePipeline-90090425"],function(c,e,t,u,i,g,n,G,r,a,A,R,o,D,l,I,s,O,d,p,y,m,h,f,b,S,v,E,P){"use strict";var _={};function B(e,t){c.defined(_[e])||(_[e]=!0,console.warn(u.defaultValue(t,e)))}function x(e){var t=(e=u.defaultValue(e,u.defaultValue.EMPTY_OBJECT)).polylinePositions,n=e.shapePositions;this._positions=t,this._shape=n,this._ellipsoid=g.Ellipsoid.clone(u.defaultValue(e.ellipsoid,g.Ellipsoid.WGS84)),this._cornerType=u.defaultValue(e.cornerType,v.CornerType.ROUNDED),this._vertexFormat=y.VertexFormat.clone(u.defaultValue(e.vertexFormat,y.VertexFormat.DEFAULT)),this._granularity=u.defaultValue(e.granularity,i.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";var r=1+t.length*g.Cartesian3.packedLength;r+=1+n.length*g.Cartesian2.packedLength,this.packedLength=r+g.Ellipsoid.packedLength+y.VertexFormat.packedLength+2}B.geometryOutlines="Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.",B.geometryZIndex="Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored",B.geometryHeightReference="Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored",B.geometryExtrudedHeightReference="Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored",x.pack=function(e,t,n){var r;n=u.defaultValue(n,0);var i=e._positions,a=i.length;for(t[n++]=a,r=0;r<a;++r,n+=g.Cartesian3.packedLength)g.Cartesian3.pack(i[r],t,n);var o=e._shape;for(a=o.length,t[n++]=a,r=0;r<a;++r,n+=g.Cartesian2.packedLength)g.Cartesian2.pack(o[r],t,n);return g.Ellipsoid.pack(e._ellipsoid,t,n),n+=g.Ellipsoid.packedLength,y.VertexFormat.pack(e._vertexFormat,t,n),n+=y.VertexFormat.packedLength,t[n++]=e._cornerType,t[n]=e._granularity,t};var k=g.Ellipsoid.clone(g.Ellipsoid.UNIT_SPHERE),V=new y.VertexFormat,C={polylinePositions:void 0,shapePositions:void 0,ellipsoid:k,vertexFormat:V,cornerType:void 0,granularity:void 0};x.unpack=function(e,t,n){var r;t=u.defaultValue(t,0);var i=e[t++],a=new Array(i);for(r=0;r<i;++r,t+=g.Cartesian3.packedLength)a[r]=g.Cartesian3.unpack(e,t);i=e[t++];var o=new Array(i);for(r=0;r<i;++r,t+=g.Cartesian2.packedLength)o[r]=g.Cartesian2.unpack(e,t);var l=g.Ellipsoid.unpack(e,t,k);t+=g.Ellipsoid.packedLength;var s=y.VertexFormat.unpack(e,t,V);t+=y.VertexFormat.packedLength;var d=e[t++],p=e[t];return c.defined(n)?(n._positions=a,n._shape=o,n._ellipsoid=g.Ellipsoid.clone(l,n._ellipsoid),n._vertexFormat=y.VertexFormat.clone(s,n._vertexFormat),n._cornerType=d,n._granularity=p,n):(C.polylinePositions=a,C.shapePositions=o,C.cornerType=d,C.granularity=p,new x(C))};var L=new h.BoundingRectangle;return x.createGeometry=function(e){var t=e._positions,n=m.arrayRemoveDuplicates(t,g.Cartesian3.equalsEpsilon),r=e._shape;if(r=v.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(r),!(n.length<2||r.length<3)){S.PolygonPipeline.computeWindingOrder2D(r)===S.WindingOrder.CLOCKWISE&&r.reverse();var i=h.BoundingRectangle.fromPoints(r,L);return function(e,t,n,r){var i=new D.GeometryAttributes;r.position&&(i.position=new R.GeometryAttribute({componentDatatype:A.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var a,o,l,s,d,p,c=t.length,u=e.length/3,g=(u-2*c)/(2*c),y=S.PolygonPipeline.triangulate(t),m=(g-1)*c*6+2*y.length,h=O.IndexDatatype.createTypedArray(u,m),f=2*c,b=0;for(a=0;a<g-1;a++){for(o=0;o<c-1;o++)p=(l=2*o+a*c*2)+f,d=(s=l+1)+f,h[b++]=s,h[b++]=l,h[b++]=d,h[b++]=d,h[b++]=l,h[b++]=p;d=(s=(l=2*c-2+a*c*2)+1)+f,p=l+f,h[b++]=s,h[b++]=l,h[b++]=d,h[b++]=d,h[b++]=l,h[b++]=p}if(r.st||r.tangent||r.bitangent){var v,E,P=new Float32Array(2*u),_=1/(g-1),x=1/n.height,k=n.height/2,V=0;for(a=0;a<g;a++){for(v=a*_,E=x*(t[0].y+k),P[V++]=v,P[V++]=E,o=1;o<c;o++)E=x*(t[o].y+k),P[V++]=v,P[V++]=E,P[V++]=v,P[V++]=E;E=x*(t[0].y+k),P[V++]=v,P[V++]=E}for(o=0;o<c;o++)v=0,E=x*(t[o].y+k),P[V++]=v,P[V++]=E;for(o=0;o<c;o++)v=(g-1)*_,E=x*(t[o].y+k),P[V++]=v,P[V++]=E;i.st=new R.GeometryAttribute({componentDatatype:A.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(P)})}var C=u-2*c;for(a=0;a<y.length;a+=3){var L=y[a]+C,w=y[a+1]+C,F=y[a+2]+C;h[b++]=L,h[b++]=w,h[b++]=F,h[b++]=F+c,h[b++]=w+c,h[b++]=L+c}var T=new R.Geometry({attributes:i,indices:h,boundingSphere:G.BoundingSphere.fromVertices(e),primitiveType:R.PrimitiveType.TRIANGLES});if(r.normal&&(T=I.GeometryPipeline.computeNormal(T)),r.tangent||r.bitangent){try{T=I.GeometryPipeline.computeTangentAndBitangent(T)}catch(e){B("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}r.tangent||(T.attributes.tangent=void 0),r.bitangent||(T.attributes.bitangent=void 0),r.st||(T.attributes.st=void 0)}return T}(v.PolylineVolumeGeometryLibrary.computePositions(n,r,i,e,!0),r,i,e._vertexFormat)}},function(e,t){return c.defined(t)&&(e=x.unpack(e,t)),e._ellipsoid=g.Ellipsoid.clone(e._ellipsoid),x.createGeometry(e)}});
